#!/bin/bash

# Exit build script on first failure.
set -e

# Exit on unset variable.
set -u

readonly DB_PATH="/app/data/store.db"

env_vars_to_flags() {
  set +u

  local flags=""

  if [[ ! -z "${SITE_TITLE}" ]]; then
    flags+=" -title \"${SITE_TITLE}\""
  fi

  if [[ ! -z "${SITE_SUBTITLE}" ]]; then
    flags+=" -subtitle \"${SITE_SUBTITLE}\""
  fi

  if [[ ! -z "${SITE_FOOTER}" ]]; then
    flags+=" -footer \"${SITE_FOOTER}\""
  fi

  if [[ "${SITE_SHOW_DOCUMENTATION}" == "false" ]]; then
    flags+=" -showdocs=false"
  fi

  if [[ ! -z "${PER_MINUTE_LIMIT}" ]]; then
    flags+=" -perminutelimit \"${PER_MINUTE_LIMIT}\""
  fi

  set -u

  echo "${flags}"
}

is_litestream_enabled() {
  set +u

  local IS_ENABLED='false'

  if [[ ! -z "${AWS_ACCESS_KEY_ID}" ]] && \
      [[ ! -z "${AWS_SECRET_ACCESS_KEY}" ]] && \
      [[ ! -z "${AWS_REGION}" ]]; then
    IS_ENABLED='true';
  fi

  set -u

  return "${IS_ENABLED}"
}

if [[ is_litestream_enabled == 'true' ]]; then

  # Set litestream configuration
  cat > /etc/litestream.yml <<EOF
  access-key-id:     "${AWS_ACCESS_KEY_ID}"
  secret-access-key: "${AWS_SECRET_ACCESS_KEY}"
  region: "${AWS_REGION}"

  dbs:
    - path: "${DB_PATH}"
      replicas:
        - url: "${DB_REPLICA_URL}"
          sync-interval: "${DB_SYNC_INTERVAL}"
EOF

fi

# Echo commands to stdout.
set -x

if [[ is_litestream_enabled == 'true' ]]; then

  # Restore database from S3.
  if [[ "${CREATE_NEW_DB}" != 'true' ]]; then
    litestream restore -v "${DB_PATH}"
  fi

  # Begin replication to S3 in the background.
  # Note: It would be nicer to use the systemd service, but systemd
  # is trickier within Docker.
  litestream replicate "${DB_PATH}" "${DB_REPLICA_URL}" &
fi

# Start server.
eval "/app/server $(env_vars_to_flags)"
