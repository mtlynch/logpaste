version: 2.1
executors:
  base:
    docker:
      - image: cimg/base:2024.02
  go:
    docker:
      - image: cimg/go:1.21.1
  node:
    docker:
      - image: cimg/node:20.6.1
jobs:
  check_whitespace:
    executor: base
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check for trailing whitespace
          command: ./dev-scripts/check-trailing-whitespace
      - run:
          name: Check that all text files end in a trailing newline
          command: ./dev-scripts/check-trailing-newline
  check_bash:
    docker:
      - image: koalaman/shellcheck-alpine:v0.9.0
    steps:
      - run:
          name: Install dependencies needed to check out repo
          command: apk add bash git openssh-client grep
      - checkout
      - run:
          name: Run static analysis on bash scripts
          command: ./dev-scripts/check-bash
  lint_sql:
    docker:
      - image: sqlfluff/sqlfluff:1.2.1
        user: root
    steps:
      - checkout
      - run:
          name: Lint SQL files
          command: |
            sqlfluff lint \
              --disable_progress_bar \
              --dialect sqlite \
              store/sqlite/migrations
  test:
    executor: go
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Test go packages
          command: dev-scripts/run-go-tests --full
      - store_artifacts:
          path: .coverage.html
      - run:
          name: Verify golang formatting
          command: dev-scripts/check-go-formatting
  build_backend:
    executor: go
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Compile production backend
          command: dev-scripts/build-backend
      - run:
          name: Compile dev backend
          command: dev-scripts/build-backend dev
  check_frontend:
    executor: node
    steps:
      - checkout
      - run:
          name: Download npm packages
          command: npm install
      - run:
          name: Check formatting
          command: npm run check-format
      - run:
          name: Check lint
          command: npm run lint
  e2e:
    machine:
      # Choose an explicit machine image so that we get the latest version of
      # docker-compose.
      image: ubuntu-2204:2023.10.1
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Perform e2e tests.
          command: dev-scripts/run-e2e-tests
          no_output_timeout: 1m
      - store_artifacts:
          path: e2e/cypress/videos
      - store_artifacts:
          path: e2e/cypress/screenshots
  deploy:
    executor: base
    resource_class: small
    environment:
      APP_NAME: logpaste-com
      # The flyctl changes too much to use a specific version, so use the latest for the
      # time being.
      # https://github.com/superfly/flyctl/issues/394#issuecomment-815890166
      FLYCTL_VERSION: "latest"
    steps:
      - checkout
      - run:
          name: Install flyctl
          command: curl -L https://fly.io/install.sh | sh -s "${FLYCTL_VERSION}"
      - run:
          name: Create fly.io config file
          command: dev-scripts/make-fly-config "${APP_NAME}"
      - run:
          name: Remove lines specifying target Docker image (force a build from source)
          command: sed '/^\[build\]/d' fly.toml | sed '/^ *image =/d'
      - run:
          name: Add a custom footer to the demo site.
          command: |
            echo '' >> fly.toml
            echo '[experimental]' >> fly.toml
            echo '  cmd = ["-footer", "<h2>Notice</h2><p>This is a demo instance. Uploads are wiped every few hours.</p>"]' >> fly.toml
      - run:
          name: Deploy logpaste to fly.io
          command: |
            "${HOME}/.fly/bin/flyctl" deploy
  build_docker_images:
    executor: base
    environment:
      BUILD_TARGETS: "linux/amd64"
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Log in to Docker Hub
          command: |
            echo "${DOCKERHUB_ACCESS_TOKEN}" | \
              docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
      - run:
          name: Enable multiarch builds with QEMU
          command: |
            docker run \
              --rm \
              --privileged \
              multiarch/qemu-user-static \
              --reset \
              -p yes
      - run:
          name: Create multiarch build context
          command: docker context create builder
      - run:
          name: Create multiplatform builder
          command: |
            docker buildx create builder \
              --name builder \
              --driver docker-container \
              --use
      - run:
          name: Ensure builder has booted
          command: docker buildx inspect --bootstrap
      - run:
          name: Build docker images
          command: |
            docker buildx build \
              --push \
              --platform "$BUILD_TARGETS" \
              --tag "mtlynch/logpaste:${CIRCLE_TAG}" \
              --tag mtlynch/logpaste:latest \
              .
workflows:
  version: 2
  test:
    jobs:
      - check_whitespace:
          filters:
            tags:
              only: /.*/
      - check_bash:
          filters:
            tags:
              only: /.*/
      - lint_sql:
          filters:
            tags:
              only: /.*/
      - test:
          filters:
            tags:
              only: /.*/
      - build_backend:
          filters:
            tags:
              only: /.*/
      - e2e:
          filters:
            tags:
              only: /.*/
      - check_frontend:
          filters:
            tags:
              only: /.*/
      - build_docker_images:
          requires:
            - check_whitespace
            - check_bash
            - lint_sql
            - test
            - build_backend
            - e2e
            - check_frontend
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+){2}/
            branches:
              ignore: /.*/
      - deploy:
          requires:
            - check_whitespace
            - check_bash
            - lint_sql
            - test
            - build_backend
            - e2e
            - check_frontend
          filters:
            branches:
              only: master
